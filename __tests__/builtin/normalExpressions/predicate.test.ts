import { describe, expect, it } from 'vitest'
import { Lits } from '../../../src/Lits/Lits'
import { LitsError } from '../../../src/errors'

describe('predicates', () => {
  for (const lits of [new Lits(), new Lits({ debug: true })]) {
    describe('function?', () => {
      it('samples', () => {
        expect(lits.run('function?("")')).toBe(false)
        expect(lits.run('function?("x")')).toBe(false)
        expect(lits.run('function?(1)')).toBe(false)
        expect(lits.run('function?(0)')).toBe(false)
        expect(lits.run('function?([])')).toBe(false)
        expect(lits.run('function?({})')).toBe(false)
        expect(lits.run('function?(null)')).toBe(false)
        expect(lits.run('function?(true)')).toBe(false)
        expect(lits.run('function?(false)')).toBe(false)
        expect(lits.run('function?(+)')).toBe(true)
        expect(lits.run('function?(-> $ - 1)')).toBe(true)
        expect(() => lits.run('function?()')).toThrow(LitsError)
        expect(() => lits.run('function?("k", "k")')).toThrow(LitsError)
      })
    })

    describe('string?', () => {
      it('samples', () => {
        expect(lits.run('string?("")')).toBe(true)
        expect(lits.run('string?("x")')).toBe(true)
        expect(lits.run('string?(1)')).toBe(false)
        expect(lits.run('string?(0)')).toBe(false)
        expect(lits.run('string?([])')).toBe(false)
        expect(lits.run('string?({})')).toBe(false)
        expect(lits.run('string?(null)')).toBe(false)
        expect(lits.run('string?(true)')).toBe(false)
        expect(lits.run('string?(false)')).toBe(false)
        expect(lits.run('string?(+)')).toBe(false)
        expect(lits.run('string?(+)')).toBe(false)
        expect(() => lits.run('string?()')).toThrow(LitsError)
        expect(() => lits.run('string?("k", "k")')).toThrow(LitsError)
      })
    })

    describe('number?', () => {
      it('samples', () => {
        expect(lits.run('number?(1)')).toBe(true)
        expect(lits.run('number?(0)')).toBe(true)
        expect(lits.run('number?(-1)')).toBe(true)
        expect(lits.run('number?(-1.123)')).toBe(true)
        expect(lits.run('number?(0.123)')).toBe(true)
        expect(lits.run('number?("")')).toBe(false)
        expect(lits.run('number?("x")')).toBe(false)
        expect(lits.run('number?([])')).toBe(false)
        expect(lits.run('number?({})')).toBe(false)
        expect(lits.run('number?(null)')).toBe(false)
        expect(lits.run('number?(false)')).toBe(false)
        expect(lits.run('number?(true)')).toBe(false)
        expect(lits.run('number?(+)')).toBe(false)
        expect(lits.run('number?(+)')).toBe(false)
        expect(() => lits.run('number?()')).toThrow(LitsError)
        expect(() => lits.run('number?(1, 2)')).toThrow(LitsError)
      })
    })

    describe('integer?', () => {
      it('samples', () => {
        expect(lits.run('integer?(1)')).toBe(true)
        expect(lits.run('integer?(0)')).toBe(true)
        expect(lits.run('integer?(-1)')).toBe(true)
        expect(lits.run('integer?(-1.123)')).toBe(false)
        expect(lits.run('integer?(0.123)')).toBe(false)
        expect(lits.run('integer?("")')).toBe(false)
        expect(lits.run('integer?("x")')).toBe(false)
        expect(lits.run('integer?([])')).toBe(false)
        expect(lits.run('integer?({})')).toBe(false)
        expect(lits.run('integer?(null)')).toBe(false)
        expect(lits.run('integer?(false)')).toBe(false)
        expect(lits.run('integer?(true)')).toBe(false)
        expect(lits.run('integer?(+)')).toBe(false)
        expect(lits.run('integer?(+)')).toBe(false)
        expect(() => lits.run('integer?()')).toThrow(LitsError)
        expect(() => lits.run('integer?(1, 2)')).toThrow(LitsError)
      })
    })

    describe('boolean?', () => {
      it('samples', () => {
        expect(lits.run('boolean?(1)')).toBe(false)
        expect(lits.run('boolean?(0)')).toBe(false)
        expect(lits.run('boolean?(-1)')).toBe(false)
        expect(lits.run('boolean?(-1.123)')).toBe(false)
        expect(lits.run('boolean?(0.123)')).toBe(false)
        expect(lits.run('boolean?("")')).toBe(false)
        expect(lits.run('boolean?("x")')).toBe(false)
        expect(lits.run('boolean?([])')).toBe(false)
        expect(lits.run('boolean?({})')).toBe(false)
        expect(lits.run('boolean?(null)')).toBe(false)
        expect(lits.run('boolean?(false)')).toBe(true)
        expect(lits.run('boolean?(true)')).toBe(true)
        expect(lits.run('boolean?(+)')).toBe(false)
        expect(lits.run('boolean?(+)')).toBe(false)
        expect(() => lits.run('boolean?()')).toThrow(LitsError)
        expect(() => lits.run('boolean?(true, false)')).toThrow(LitsError)
      })
    })

    describe('null?', () => {
      it('samples', () => {
        expect(lits.run('null?(1)')).toBe(false)
        expect(lits.run('null?(0)')).toBe(false)
        expect(lits.run('null?(-1)')).toBe(false)
        expect(lits.run('null?(-1.123)')).toBe(false)
        expect(lits.run('null?(0.123)')).toBe(false)
        expect(lits.run('null?("")')).toBe(false)
        expect(lits.run('null?("x")')).toBe(false)
        expect(lits.run('null?([])')).toBe(false)
        expect(lits.run('null?({})')).toBe(false)
        expect(lits.run('null?(null)')).toBe(true)
        expect(lits.run('null?(false)')).toBe(false)
        expect(lits.run('null?(true)')).toBe(false)
        expect(lits.run('null?(+)')).toBe(false)
        expect(lits.run('null?(+)')).toBe(false)
        expect(() => lits.run('null?()')).toThrow(LitsError)
        expect(() => lits.run('null?(true, false)')).toThrow(LitsError)
      })
    })

    describe('zero?', () => {
      it('samples', () => {
        expect(lits.run('zero?(1)')).toBe(false)
        expect(lits.run('zero?(0)')).toBe(true)
        expect(lits.run('zero?(0.0)')).toBe(true)
        expect(lits.run('zero?(-0)')).toBe(true)
        expect(lits.run('zero?(0 / -1)')).toBe(true)
        expect(lits.run('zero?(-1)')).toBe(false)
        expect(() => lits.run('zero?()')).toThrow(LitsError)
        expect(() => lits.run('zero?("")')).toThrow(LitsError)
        expect(() => lits.run('zero?(true)')).toThrow(LitsError)
        expect(() => lits.run('zero?(false)')).toThrow(LitsError)
        expect(() => lits.run('zero?(null)')).toThrow(LitsError)
        expect(() => lits.run('zero?({})')).toThrow(LitsError)
        expect(() => lits.run('zero?([])')).toThrow(LitsError)
      })
    })

    describe('pos?', () => {
      it('samples', () => {
        expect(lits.run('pos?(1)')).toBe(true)
        expect(lits.run('pos?(0.1)')).toBe(true)
        expect(lits.run('pos?(0)')).toBe(false)
        expect(lits.run('pos?(-0)')).toBe(false)
        expect(lits.run('pos?(0 / -1)')).toBe(false)
        expect(lits.run('pos?(-1)')).toBe(false)
        expect(() => lits.run('pos?()')).toThrow(LitsError)
        expect(() => lits.run('pos?("")')).toThrow(LitsError)
        expect(() => lits.run('pos?(true)')).toThrow(LitsError)
        expect(() => lits.run('pos?(false)')).toThrow(LitsError)
        expect(() => lits.run('pos?(null)')).toThrow(LitsError)
        expect(() => lits.run('pos?({})')).toThrow(LitsError)
        expect(() => lits.run('pos?([])')).toThrow(LitsError)
      })
    })

    describe('neg?', () => {
      it('samples', () => {
        expect(lits.run('neg?(1)')).toBe(false)
        expect(lits.run('neg?(0)')).toBe(false)
        expect(lits.run('neg?(-0)')).toBe(false)
        expect(lits.run('neg?(0 / -1)')).toBe(false)
        expect(lits.run('neg?(-1)')).toBe(true)
        expect(() => lits.run('neg?()')).toThrow(LitsError)
        expect(() => lits.run('neg?("")')).toThrow(LitsError)
        expect(() => lits.run('neg?(true)')).toThrow(LitsError)
        expect(() => lits.run('neg?(false)')).toThrow(LitsError)
        expect(() => lits.run('neg?(null)')).toThrow(LitsError)
        expect(() => lits.run('neg?({})')).toThrow(LitsError)
        expect(() => lits.run('neg?([])')).toThrow(LitsError)
      })
    })

    describe('even?', () => {
      it('samples', () => {
        expect(lits.run('even?(1)')).toBe(false)
        expect(lits.run('even?(0)')).toBe(true)
        expect(lits.run('even?(-0)')).toBe(true)
        expect(lits.run('even?(0 / -1)')).toBe(true)
        expect(lits.run('even?(-1)')).toBe(false)
        expect(lits.run('even?(-10)')).toBe(true)
        expect(lits.run('even?(-2.001)')).toBe(false)
        expect(lits.run('even?(4)')).toBe(true)
        expect(() => lits.run('even?()')).toThrow(LitsError)
        expect(() => lits.run('even?("")')).toThrow(LitsError)
        expect(() => lits.run('even?(true)')).toThrow(LitsError)
        expect(() => lits.run('even?(false)')).toThrow(LitsError)
        expect(() => lits.run('even?(null)')).toThrow(LitsError)
        expect(() => lits.run('even?({})')).toThrow(LitsError)
        expect(() => lits.run('even?([])')).toThrow(LitsError)
      })
    })

    describe('odd?', () => {
      it('samples', () => {
        expect(lits.run('odd?(1)')).toBe(true)
        expect(lits.run('odd?(0)')).toBe(false)
        expect(lits.run('odd?(-0)')).toBe(false)
        expect(lits.run('odd?(0 / -1)')).toBe(false)
        expect(lits.run('odd?(-1)')).toBe(true)
        expect(lits.run('odd?(-10)')).toBe(false)
        expect(lits.run('odd?(-2.001)')).toBe(false)
        expect(lits.run('odd?(4)')).toBe(false)
        expect(lits.run('odd?(5)')).toBe(true)
        expect(() => lits.run('odd?()')).toThrow(LitsError)
        expect(() => lits.run('odd?("")')).toThrow(LitsError)
        expect(() => lits.run('odd?(true)')).toThrow(LitsError)
        expect(() => lits.run('odd?(false)')).toThrow(LitsError)
        expect(() => lits.run('odd?(null)')).toThrow(LitsError)
        expect(() => lits.run('odd?({})')).toThrow(LitsError)
        expect(() => lits.run('odd?([])')).toThrow(LitsError)
      })
    })

    describe('array?', () => {
      it('samples', () => {
        expect(lits.run('array?(1)')).toBe(false)
        expect(lits.run('array?(0)')).toBe(false)
        expect(lits.run('array?(-1)')).toBe(false)
        expect(lits.run('array?(-1.123)')).toBe(false)
        expect(lits.run('array?(0.123)')).toBe(false)
        expect(lits.run('array?("")')).toBe(false)
        expect(lits.run('array?("x")')).toBe(false)
        expect(lits.run('array?([])')).toBe(true)
        expect(lits.run('array?([1, 2, 3])')).toBe(true)
        expect(lits.run('array?({})')).toBe(false)
        expect(lits.run('array?(null)')).toBe(false)
        expect(lits.run('array?(false)')).toBe(false)
        expect(lits.run('array?(true)')).toBe(false)
        expect(lits.run('array?(+)')).toBe(false)
        expect(() => lits.run('array?()')).toThrow(LitsError)
        expect(() => lits.run('array?(true, false)')).toThrow(LitsError)
      })
    })

    describe('coll?', () => {
      it('samples', () => {
        expect(lits.run('coll?(1)')).toBe(false)
        expect(lits.run('coll?(0)')).toBe(false)
        expect(lits.run('coll?(-1)')).toBe(false)
        expect(lits.run('coll?(-1.123)')).toBe(false)
        expect(lits.run('coll?(0.123)')).toBe(false)
        expect(lits.run('coll?("")')).toBe(true)
        expect(lits.run('coll?("x")')).toBe(true)
        expect(lits.run('coll?([])')).toBe(true)
        expect(lits.run('coll?([1, 2, 3])')).toBe(true)
        expect(lits.run('coll?({})')).toBe(true)
        expect(lits.run('coll?({ a: 1 })')).toBe(true)
        expect(lits.run('coll?(null)')).toBe(false)
        expect(lits.run('coll?(false)')).toBe(false)
        expect(lits.run('coll?(true)')).toBe(false)
        expect(lits.run('coll?(+)')).toBe(false)
        expect(lits.run('coll?(+)')).toBe(false)
        expect(() => lits.run('coll?()')).toThrow(LitsError)
        expect(() => lits.run('coll?(true, false)')).toThrow(LitsError)
      })
    })

    describe('seq?', () => {
      it('samples', () => {
        expect(lits.run('seq?(1)')).toBe(false)
        expect(lits.run('seq?(0)')).toBe(false)
        expect(lits.run('seq?(-1)')).toBe(false)
        expect(lits.run('seq?(-1.123)')).toBe(false)
        expect(lits.run('seq?(0.123)')).toBe(false)
        expect(lits.run('seq?("")')).toBe(true)
        expect(lits.run('seq?("x")')).toBe(true)
        expect(lits.run('seq?([])')).toBe(true)
        expect(lits.run('seq?([1, 2, 3])')).toBe(true)
        expect(lits.run('seq?({})')).toBe(false)
        expect(lits.run('seq?({ a: 1 })')).toBe(false)
        expect(lits.run('seq?(null)')).toBe(false)
        expect(lits.run('seq?(false)')).toBe(false)
        expect(lits.run('seq?(true)')).toBe(false)
        expect(lits.run('seq?(+)')).toBe(false)
        expect(lits.run('seq?(+)')).toBe(false)
        expect(() => lits.run('seq?()')).toThrow(LitsError)
        expect(() => lits.run('seq?(true, false)')).toThrow(LitsError)
      })
    })

    describe('object?', () => {
      it('samples', () => {
        expect(lits.run('object?(1)')).toBe(false)
        expect(lits.run('object?(0)')).toBe(false)
        expect(lits.run('object?(-1)')).toBe(false)
        expect(lits.run('object?(-1.123)')).toBe(false)
        expect(lits.run('object?(0.123)')).toBe(false)
        expect(lits.run('object?("")')).toBe(false)
        expect(lits.run('object?("x")')).toBe(false)
        expect(lits.run('object?([])')).toBe(false)
        expect(lits.run('object?(object("x", 10))')).toBe(true)
        expect(lits.run('object?(null)')).toBe(false)
        expect(lits.run('object?(regexp("abc"))')).toBe(false)
        expect(lits.run('object?(false)')).toBe(false)
        expect(lits.run('object?(true)')).toBe(false)
        expect(lits.run('object?(+)')).toBe(false)
        expect(lits.run('object?(+)')).toBe(false)
        expect(() => lits.run('object?()')).toThrow(LitsError)
        expect(() => lits.run('object?(true, false)')).toThrow(LitsError)
      })
    })

    describe('regexp?', () => {
      it('samples', () => {
        expect(lits.run('regexp?(1)')).toBe(false)
        expect(lits.run('regexp?(0)')).toBe(false)
        expect(lits.run('regexp?(-1)')).toBe(false)
        expect(lits.run('regexp?(-1.123)')).toBe(false)
        expect(lits.run('regexp?(0.123)')).toBe(false)
        expect(lits.run('regexp?("")')).toBe(false)
        expect(lits.run('regexp?("x")')).toBe(false)
        expect(lits.run('regexp?([])')).toBe(false)
        expect(lits.run('regexp?(object("x", 10))')).toBe(false)
        expect(lits.run('regexp?(null)')).toBe(false)
        expect(lits.run('regexp?(regexp("abc"))')).toBe(true)
        expect(lits.run('regexp?(false)')).toBe(false)
        expect(lits.run('regexp?(true)')).toBe(false)
        expect(lits.run('regexp?(+)')).toBe(false)
        expect(lits.run('regexp?(+)')).toBe(false)
        expect(() => lits.run('regexp?()')).toThrow(LitsError)
        expect(() => lits.run('regexp?(true, false)')).toThrow(LitsError)
      })
    })

    describe('finite?', () => {
      it('samples', () => {
        expect(lits.run('finite?(1)')).toBe(true)
        expect(lits.run('finite?(0)')).toBe(true)
        expect(lits.run('finite?(1 / 0)')).toBe(false)
        expect(lits.run('finite?(-1 / 0)')).toBe(false)
        expect(() => lits.run('finite?(sqrt(-1))')).toThrow(LitsError)
      })
    })

    describe('positive-infinity?', () => {
      it('samples', () => {
        expect(lits.run('positive-infinity?(1)')).toBe(false)
        expect(lits.run('positive-infinity?(0)')).toBe(false)
        expect(lits.run('positive-infinity?(1 / 0)')).toBe(true)
        expect(lits.run('positive-infinity?(-1 / 0)')).toBe(false)
        expect(() => lits.run('positive-infinity?(sqrt(-1))')).toThrow(LitsError)
      })
    })

    describe('negative-infinity?', () => {
      it('samples', () => {
        expect(lits.run('negative-infinity?(1)')).toBe(false)
        expect(lits.run('negative-infinity?(0)')).toBe(false)
        expect(lits.run('negative-infinity?(1 / 0)')).toBe(false)
        expect(lits.run('negative-infinity?(-1 / 0)')).toBe(true)
        expect(() => lits.run('negative-infinity?(sqrt(-1))')).toThrow(LitsError)
      })
    })

    describe('true?', () => {
      it('samples', () => {
        expect(lits.run('true?(false)')).toBe(false)
        expect(lits.run('true?(true)')).toBe(true)
        expect(lits.run('true?(1)')).toBe(false)
        expect(lits.run('true?(0)')).toBe(false)
        expect(lits.run('true?("Mojir")')).toBe(false)
      })
    })

    describe('false?', () => {
      it('samples', () => {
        expect(lits.run('false?(false)')).toBe(true)
        expect(lits.run('false?(true)')).toBe(false)
        expect(lits.run('false?(1)')).toBe(false)
        expect(lits.run('false?(0)')).toBe(false)
        expect(lits.run('false?("Mojir")')).toBe(false)
      })
    })

    describe('empty?', () => {
      it('samples', () => {
        expect(lits.run('empty?([])')).toBe(true)
        expect(lits.run('empty?([0])')).toBe(false)
        expect(lits.run('empty?({})')).toBe(true)
        expect(lits.run('empty?({ a: 2 })')).toBe(false)
        expect(lits.run('empty?("")')).toBe(true)
        expect(lits.run('empty?("Albert")')).toBe(false)
        expect(lits.run('empty?(null)')).toBe(true)

        expect(() => lits.run('empty?()')).toThrow(LitsError)
        expect(() => lits.run('empty?(true)')).toThrow(LitsError)
        expect(() => lits.run('empty?(false)')).toThrow(LitsError)
        expect(() => lits.run('empty?(10)')).toThrow(LitsError)
        expect(() => lits.run('empty?(regexp("^start"))')).toThrow(LitsError)
      })
    })

    describe('not-empty?', () => {
      it('samples', () => {
        expect(lits.run('not-empty?([])')).toBe(false)
        expect(lits.run('not-empty?([0])')).toBe(true)
        expect(lits.run('not-empty?({})')).toBe(false)
        expect(lits.run('not-empty?({ a: 2 })')).toBe(true)
        expect(lits.run('not-empty?("")')).toBe(false)
        expect(lits.run('not-empty?("Albert")')).toBe(true)
        expect(lits.run('not-empty?(null)')).toBe(false)

        expect(() => lits.run('not-(mpty?)')).toThrow(LitsError)
        expect(() => lits.run('not-(mpty?)')).toThrow(LitsError)
        expect(() => lits.run('not-empty?(true)')).toThrow(LitsError)
        expect(() => lits.run('not-empty?(false)')).toThrow(LitsError)
        expect(() => lits.run('not-empty?(undefined)')).toThrow(LitsError)
        expect(() => lits.run('not-empty?(10)')).toThrow(LitsError)
        expect(() => lits.run('not-empty?(regexp("^start"))')).toThrow(LitsError)
      })
    })

    describe('vector?', () => {
      it('should determine if a value is a vector', () => {
        expect(lits.run('vector?([])')).toEqual(true)
        expect(lits.run('vector?([1, 2, 3])')).toEqual(true)
        expect(lits.run('vector?([1, 2, [3]])')).toEqual(false)
        expect(lits.run('vector?([1, 2, 3.0])')).toEqual(true)
        expect(lits.run('vector?([1, 2, "3"])')).toEqual(false)
        expect(lits.run('vector?([1, 2, true])')).toEqual(false)
        expect(lits.run('vector?([1, 2, {}])')).toEqual(false)
        expect(lits.run('vector?(12)')).toEqual(false)
        expect(lits.run('vector?({})')).toEqual(false)
      })
    })
  }
})
