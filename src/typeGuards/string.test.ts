import { describe, expect, it } from 'vitest'
import { LitsError } from '../errors'
import { asString, assertString } from './string'

describe('string type guards', () => {
  it('asNonEmptyString', () => {
    expect(asString('1', undefined, { nonEmpty: true })).toBe('1')
    expect(() => asString('', undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString(0, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString(1, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString(true, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString(false, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString(null, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString(undefined, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString([], undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => asString({}, undefined, { nonEmpty: true })).toThrow(LitsError)
  })

  it('assertString', () => {
    expect(() => assertString('', undefined)).not.toThrow()
    expect(() => assertString('1', undefined)).not.toThrow()
    expect(() => assertString(0, undefined)).toThrow(LitsError)
    expect(() => assertString(1, undefined)).toThrow(LitsError)
    expect(() => assertString(true, undefined)).toThrow(LitsError)
    expect(() => assertString(false, undefined)).toThrow(LitsError)
    expect(() => assertString(null, undefined)).toThrow(LitsError)
    expect(() => assertString(undefined, undefined)).toThrow(LitsError)
    expect(() => assertString([], undefined)).toThrow(LitsError)
    expect(() => assertString({}, undefined)).toThrow(LitsError)
  })
  it('asString', () => {
    expect(() => asString('', undefined)).not.toThrow()
    expect(() => asString('1', undefined)).not.toThrow()
    expect(() => asString(0, undefined)).toThrow(LitsError)
    expect(() => asString(1, undefined)).toThrow(LitsError)
    expect(() => asString(true, undefined)).toThrow(LitsError)
    expect(() => asString(false, undefined)).toThrow(LitsError)
    expect(() => asString(null, undefined)).toThrow(LitsError)
    expect(() => asString(undefined, undefined)).toThrow(LitsError)
    expect(() => asString([], undefined)).toThrow(LitsError)
    expect(() => asString({}, undefined)).toThrow(LitsError)
  })
  it('assertNonEmptyString', () => {
    expect(() => assertString('1', undefined, { nonEmpty: true })).not.toThrow()
    expect(() => assertString('abc', undefined, { nonEmpty: true })).not.toThrow()
    expect(() => assertString('', undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString(0, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString(1, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString(true, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString(false, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString(null, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString(undefined, undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString([], undefined, { nonEmpty: true })).toThrow(LitsError)
    expect(() => assertString({}, undefined, { nonEmpty: true })).toThrow(LitsError)
  })

  it('assertChar', () => {
    expect(() => assertString('2', undefined, { char: true })).not.toThrow()
    expect(() => assertString('Albert', undefined, { char: true })).toThrow(LitsError)
    expect(() => assertString(0, undefined, { char: true })).toThrow(LitsError)
    expect(() => assertString(null, undefined, { char: true })).toThrow(LitsError)
    expect(() => assertString(true, undefined, { char: true })).toThrow(LitsError)
    expect(() => assertString(false, undefined, { char: true })).toThrow(LitsError)
    expect(() => assertString(['a'], undefined, { char: true })).toThrow(LitsError)
    expect(() => assertString({ a: 'a' }, undefined, { char: true })).toThrow(LitsError)
  })
  it('asChar', () => {
    expect(asString('2', undefined, { char: true })).toBe('2')
    expect(() => asString('Albert', undefined, { char: true })).toThrow(LitsError)
    expect(() => asString(0, undefined, { char: true })).toThrow(LitsError)
    expect(() => asString(null, undefined, { char: true })).toThrow(LitsError)
    expect(() => asString(true, undefined, { char: true })).toThrow(LitsError)
    expect(() => asString(false, undefined, { char: true })).toThrow(LitsError)
    expect(() => asString(['a'], undefined, { char: true })).toThrow(LitsError)
    expect(() => asString({ a: 'a' }, undefined, { char: true })).toThrow(LitsError)
  })

  it('character', () => {
    expect(() => assertString('k', undefined, { char: true })).not.toThrow()
    expect(() => assertString('k1', undefined, { char: true })).toThrow(LitsError)
    expect(() => assertString(1, undefined, { char: true })).toThrow(LitsError)
  })
})
