import { describe, expect, it } from 'vitest'
import { LitsError } from '../errors'
import { asNumber, assertNumber, isNumber } from './number'

describe('number type guards', () => {
  it('assertInteger', () => {
    expect(() => assertNumber(-0, undefined, { integer: true })).not.toThrow()
    expect(() => assertNumber(-1, undefined, { integer: true })).not.toThrow()
    expect(() => assertNumber(1, undefined, { integer: true })).not.toThrow()
    expect(() => assertNumber(-0.1, undefined, { integer: true })).toThrow(LitsError)
    expect(() => assertNumber(1.00001, undefined, { integer: true })).toThrow(LitsError)
    expect(() => assertNumber('k', undefined, { integer: true })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { integer: true })).toThrow(LitsError)
    expect(() => assertNumber(undefined, undefined, { integer: true })).toThrow(LitsError)
    expect(() => assertNumber(null, undefined, { integer: true })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { integer: true })).toThrow(LitsError)
  })

  it('assertPositiveNumber', () => {
    expect(() => assertNumber(-1, undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber(-0.5, undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber(0, undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber(0.5, undefined, { positive: true })).not.toThrow()
    expect(() => assertNumber(1, undefined, { positive: true })).not.toThrow()
    expect(() => assertNumber('1', undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber({}, undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber(true, undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber(null, undefined, { positive: true })).toThrow(LitsError)
    expect(() => assertNumber(undefined, undefined, { positive: true })).toThrow(LitsError)
  })
  it('assertNegativeNumber', () => {
    expect(() => assertNumber(-1, undefined, { negative: true })).not.toThrow()
    expect(() => assertNumber(-0.5, undefined, { negative: true })).not.toThrow()
    expect(() => assertNumber(0, undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber(0.5, undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber(1, undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber('1', undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber({}, undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber(true, undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber(null, undefined, { negative: true })).toThrow(LitsError)
    expect(() => assertNumber(undefined, undefined, { negative: true })).toThrow(LitsError)
  })
  it('assertNonNegativeNumber', () => {
    expect(() => assertNumber(-1, undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber(-1.1, undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber(0, undefined, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber(0.1, undefined, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber(1, undefined, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber(1.1, undefined, { nonNegative: true })).not.toThrow()
    expect(() => assertNumber('1', undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber({}, undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber(true, undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber(null, undefined, { nonNegative: true })).toThrow(LitsError)
    expect(() => assertNumber(undefined, undefined, { nonNegative: true })).toThrow(LitsError)
  })
  it('assertNonPositiveNumber', () => {
    expect(() => assertNumber(-1, undefined, { nonPositive: true })).not.toThrow()
    expect(() => assertNumber(-1.1, undefined, { nonPositive: true })).not.toThrow()
    expect(() => assertNumber(0, undefined, { nonPositive: true })).not.toThrow()
    expect(() => assertNumber(0.1, undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber(1, undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber(1.1, undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber('1', undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber({}, undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber(true, undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber(null, undefined, { nonPositive: true })).toThrow(LitsError)
    expect(() => assertNumber(undefined, undefined, { nonPositive: true })).toThrow(LitsError)
  })
  it('assertFiniteNumber', () => {
    expect(() => assertNumber(-1, undefined, { finite: true })).not.toThrow()
    expect(() => assertNumber(-1.1, undefined, { finite: true })).not.toThrow()
    expect(() => assertNumber(0, undefined, { finite: true })).not.toThrow()
    expect(() => assertNumber(0.1, undefined, { finite: true })).not.toThrow()
    expect(() => assertNumber(1, undefined, { finite: true })).not.toThrow()
    expect(() => assertNumber(1.1, undefined, { finite: true })).not.toThrow()
    expect(() => assertNumber(Math.asin(2), undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber(1 / 0, undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber('1', undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber({}, undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber(true, undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber(null, undefined, { finite: true })).toThrow(LitsError)
    expect(() => assertNumber(undefined, undefined, { finite: true })).toThrow(LitsError)
  })
  it('asFiniteNumber', () => {
    expect(asNumber(-1, undefined, { finite: true })).toBe(-1)
    expect(asNumber(-1.1, undefined, { finite: true })).toBe(-1.1)
    expect(asNumber(0, undefined, { finite: true })).toBe(0)
    expect(asNumber(0.1, undefined, { finite: true })).toBe(0.1)
    expect(asNumber(1, undefined, { finite: true })).toBe(1)
    expect(asNumber(1.1, undefined, { finite: true })).toBe(1.1)
    expect(() => asNumber(Math.asin(2), undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber(1 / 0, undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber('1', undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber('1', undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber([], undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber({}, undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber(true, undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber(false, undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber(null, undefined, { finite: true })).toThrow(LitsError)
    expect(() => asNumber(undefined, undefined, { finite: true })).toThrow(LitsError)
  })
  it('assertNumberGt', () => {
    expect(() => assertNumber(0, undefined, { gt: 1 })).toThrow(LitsError)
    expect(() => assertNumber(0.5, undefined, { gt: 1 })).toThrow(LitsError)
    expect(() => assertNumber(1, undefined, { gt: 1 })).toThrow(LitsError)
    expect(() => assertNumber(1.5, undefined, { gt: 1 })).not.toThrow()
    expect(() => assertNumber(2, undefined, { gt: 1 })).not.toThrow()
    expect(() => assertNumber('2', undefined, { gt: 1 })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { gt: 1 })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { gt: 1 })).toThrow(LitsError)
  })
  it('assertNumberGte', () => {
    expect(() => assertNumber(0, undefined, { gte: 1 })).toThrow(LitsError)
    expect(() => assertNumber(0.5, undefined, { gte: 1 })).toThrow(LitsError)
    expect(() => assertNumber(1, undefined, { gte: 1 })).not.toThrow()
    expect(() => assertNumber(1.5, undefined, { gte: 1 })).not.toThrow()
    expect(() => assertNumber(2, undefined, { gte: 1 })).not.toThrow()
    expect(() => assertNumber('2', undefined, { gte: 1 })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { gte: 1 })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { gte: 1 })).toThrow(LitsError)
  })
  it('assertNumberLt', () => {
    expect(() => assertNumber(0, undefined, { lt: 1 })).not.toThrow()
    expect(() => assertNumber(0.5, undefined, { lt: 1 })).not.toThrow()
    expect(() => assertNumber(1, undefined, { lt: 1 })).toThrow(LitsError)
    expect(() => assertNumber(1.5, undefined, { lt: 1 })).toThrow(LitsError)
    expect(() => assertNumber(2, undefined, { lt: 1 })).toThrow(LitsError)
    expect(() => assertNumber('2', undefined, { lt: 1 })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { lt: 1 })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { lt: 1 })).toThrow(LitsError)
  })
  it('assertNumberLte', () => {
    expect(() => assertNumber(0, undefined, { lte: 1 })).not.toThrow()
    expect(() => assertNumber(0.5, undefined, { lte: 1 })).not.toThrow()
    expect(() => assertNumber(1, undefined, { lte: 1 })).not.toThrow()
    expect(() => assertNumber(1.5, undefined, { lte: 1 })).toThrow(LitsError)
    expect(() => assertNumber(2, undefined, { lte: 1 })).toThrow(LitsError)
    expect(() => assertNumber('2', undefined, { lte: 1 })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { lte: 1 })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { lte: 1 })).toThrow(LitsError)
  })
  it('assertNumberNotZero', () => {
    expect(() => assertNumber(-1, undefined, { nonZero: true })).not.toThrow()
    expect(() => assertNumber(-0.5, undefined, { nonZero: true })).not.toThrow()
    expect(() => assertNumber(0, undefined, { nonZero: true })).toThrow(LitsError)
    expect(() => assertNumber(0.5, undefined, { nonZero: true })).not.toThrow()
    expect(() => assertNumber(1, undefined, { nonZero: true })).not.toThrow()
    expect(() => assertNumber('1', undefined, { nonZero: true })).toThrow(LitsError)
    expect(() => assertNumber([], undefined, { nonZero: true })).toThrow(LitsError)
    expect(() => assertNumber({}, undefined, { nonZero: true })).toThrow(LitsError)
    expect(() => assertNumber(true, undefined, { nonZero: true })).toThrow(LitsError)
    expect(() => assertNumber(false, undefined, { nonZero: true })).toThrow(LitsError)
    expect(() => assertNumber(null, undefined, { nonZero: true })).toThrow(LitsError)
    expect(() => assertNumber(undefined, undefined, { nonZero: true })).toThrow(LitsError)
  })

  it('isNumber', () => {
    expect(isNumber(1 / 0)).toBe(true)
    expect(isNumber(Number('abc'))).toBe(true)
    expect(isNumber(0.12)).toBe(true)
    expect(isNumber(undefined)).toBe(false)
    expect(isNumber('undefined')).toBe(false)
    expect(isNumber([])).toBe(false)
  })

  it('asInteger', () => {
    expect(() => asNumber(1 / 0, undefined, { integer: true })).toThrow(LitsError)
    expect(() => asNumber(Number('abc'), undefined, { integer: true })).toThrow(LitsError)
    expect(() => asNumber(12, undefined, { integer: true })).not.toThrow()
    expect(() => asNumber(undefined, undefined, { integer: true })).toThrow(LitsError)
    expect(() => asNumber('undefined', undefined, { integer: true })).toThrow(LitsError)
    expect(() => asNumber([], undefined, { integer: true })).toThrow(LitsError)
  })

  it('isInteger', () => {
    expect(isNumber(1 / 0, { integer: true })).toBe(false)
    expect(isNumber(Number('abc'), { integer: true })).toBe(false)
    expect(isNumber(0.12, { integer: true })).toBe(false)
    expect(isNumber(-12, { integer: true })).toBe(true)
    expect(isNumber(0, { integer: true })).toBe(true)
    expect(isNumber(12, { integer: true })).toBe(true)
    expect(isNumber(undefined, { integer: true })).toBe(false)
    expect(isNumber('undefined', { integer: true })).toBe(false)
    expect(isNumber([], { integer: true })).toBe(false)
  })

  it('assertNumber', () => {
    expect(() => assertNumber(1 / 0, undefined)).not.toThrow()
    expect(() => assertNumber(Number('abc'), undefined)).not.toThrow()
    expect(() => assertNumber(0.12, undefined)).not.toThrow()
    expect(() => assertNumber(undefined, undefined)).toThrow(LitsError)
    expect(() => assertNumber('undefined', undefined)).toThrow(LitsError)
    expect(() => assertNumber([], undefined)).toThrow(LitsError)
  })

  it('assertMax', () => {
    expect(() => assertNumber(12, undefined, { lte: 10 })).toThrow(LitsError)
    expect(() => assertNumber(-12, undefined, { lte: -10 })).not.toThrow()
    expect(() => assertNumber(-8, undefined, { lte: -10 })).toThrow(LitsError)
    expect(() => assertNumber(10, undefined, { lte: 10 })).not.toThrow()
    expect(() => assertNumber(0, undefined, { lte: 10 })).not.toThrow()
  })

  it('number', () => {
    expect(() => assertNumber(0, undefined, { zero: true })).not.toThrow()
    expect(() => assertNumber(1, undefined, { zero: true })).toThrow(LitsError)
    expect(() => assertNumber(1.5, undefined, { gt: 1, lt: 2 })).not.toThrow()
    expect(() => assertNumber(1, undefined, { gt: 1, lt: 2 })).toThrow(LitsError)
    expect(() => assertNumber(2, undefined, { gt: 1, lt: 2 })).toThrow(LitsError)
    expect(() => assertNumber(1.5, undefined, { gte: 1, lte: 2 })).not.toThrow()
    expect(() => assertNumber(1, undefined, { gte: 1, lte: 2 })).not.toThrow()
    expect(() => assertNumber(2.5, undefined, { gte: 1, lte: 2 })).toThrow(LitsError)
  })
})
