import { describe, expect, it } from 'vitest'
import { Lits } from '../../../../../Lits/Lits'

const lits = new Lits()
describe('primeFactors', () => {
  describe('nth:prime-factors', () => {
    it('should return find prime factors', () => {
      expect(lits.run('nth:prime-factors(1)')).toEqual([])
      expect(lits.run('nth:prime-factors(2)')).toEqual([2])
      expect(lits.run('nth:prime-factors(3)')).toEqual([3])
      expect(lits.run('nth:prime-factors(4)')).toEqual([2, 2])
      expect(lits.run('nth:prime-factors(5)')).toEqual([5])
      expect(lits.run('nth:prime-factors(6)')).toEqual([2, 3])
      expect(lits.run('nth:prime-factors(7)')).toEqual([7])
      expect(lits.run('nth:prime-factors(8)')).toEqual([2, 2, 2])
      expect(lits.run('nth:prime-factors(9)')).toEqual([3, 3])
      expect(lits.run('nth:prime-factors(10)')).toEqual([2, 5])
      expect(lits.run('nth:prime-factors(100)')).toEqual([2, 2, 5, 5])
      expect(lits.run('nth:prime-factors(1484147626962)')).toEqual([2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37])
    })
  })
  describe('nth:distinct-prime-factors', () => {
    it('should return distinct prime factors', () => {
      expect(lits.run('nth:distinct-prime-factors(1)')).toEqual([])
      expect(lits.run('nth:distinct-prime-factors(2)')).toEqual([2])
      expect(lits.run('nth:distinct-prime-factors(3)')).toEqual([3])
      expect(lits.run('nth:distinct-prime-factors(4)')).toEqual([2])
      expect(lits.run('nth:distinct-prime-factors(5)')).toEqual([5])
      expect(lits.run('nth:distinct-prime-factors(6)')).toEqual([2, 3])
      expect(lits.run('nth:distinct-prime-factors(7)')).toEqual([7])
      expect(lits.run('nth:distinct-prime-factors(8)')).toEqual([2])
      expect(lits.run('nth:distinct-prime-factors(9)')).toEqual([3])
    })
  })
  describe('nth:count-prime-factors', () => {
    it('should return the number of prime factors of n', () => {
      expect(lits.run('nth:count-prime-factors(1)')).toEqual(0)
      expect(lits.run('nth:count-prime-factors(2)')).toEqual(1)
      expect(lits.run('nth:count-prime-factors(3)')).toEqual(1)
      expect(lits.run('nth:count-prime-factors(4)')).toEqual(2)
      expect(lits.run('nth:count-prime-factors(5)')).toEqual(1)
      expect(lits.run('nth:count-prime-factors(6)')).toEqual(2)
      expect(lits.run('nth:count-prime-factors(7)')).toEqual(1)
      expect(lits.run('nth:count-prime-factors(8)')).toEqual(3)
      expect(lits.run('nth:count-prime-factors(9)')).toEqual(2)
      expect(lits.run('nth:count-prime-factors(10)')).toEqual(2)
      expect(lits.run('nth:count-prime-factors(100)')).toEqual(4)
    })
  })
  describe('nth:count-distinct-prime-factors', () => {
    it('should return the number of distinct prime factors of n', () => {
      expect(lits.run('nth:count-distinct-prime-factors(1)')).toEqual(0)
      expect(lits.run('nth:count-distinct-prime-factors(2)')).toEqual(1)
      expect(lits.run('nth:count-distinct-prime-factors(3)')).toEqual(1)
      expect(lits.run('nth:count-distinct-prime-factors(4)')).toEqual(1)
      expect(lits.run('nth:count-distinct-prime-factors(5)')).toEqual(1)
      expect(lits.run('nth:count-distinct-prime-factors(6)')).toEqual(2)
      expect(lits.run('nth:count-distinct-prime-factors(7)')).toEqual(1)
      expect(lits.run('nth:count-distinct-prime-factors(8)')).toEqual(1)
      expect(lits.run('nth:count-distinct-prime-factors(9)')).toEqual(1)
      expect(lits.run('nth:count-distinct-prime-factors(10)')).toEqual(2)
      expect(lits.run('nth:count-distinct-prime-factors(100)')).toEqual(2)
    })
  })
})
